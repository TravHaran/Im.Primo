# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mmapi', [dirname(__file__)])
        except ImportError:
            import _mmapi
            return _mmapi
        if fp is not None:
            try:
                _mod = imp.load_module('_mmapi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mmapi = swig_import_helper()
    del swig_import_helper
else:
    import _mmapi
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mmapi.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _mmapi.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _mmapi.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _mmapi.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _mmapi.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _mmapi.SwigPyIterator_equal(self, x)

    def copy(self):
        return _mmapi.SwigPyIterator_copy(self)

    def next(self):
        return _mmapi.SwigPyIterator_next(self)

    def __next__(self):
        return _mmapi.SwigPyIterator___next__(self)

    def previous(self):
        return _mmapi.SwigPyIterator_previous(self)

    def advance(self, n):
        return _mmapi.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _mmapi.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _mmapi.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _mmapi.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _mmapi.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _mmapi.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _mmapi.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _mmapi.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectorub(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorub, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorub, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _mmapi.vectorub_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mmapi.vectorub___nonzero__(self)

    def __bool__(self):
        return _mmapi.vectorub___bool__(self)

    def __len__(self):
        return _mmapi.vectorub___len__(self)

    def pop(self):
        return _mmapi.vectorub_pop(self)

    def __getslice__(self, i, j):
        return _mmapi.vectorub___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mmapi.vectorub___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mmapi.vectorub___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mmapi.vectorub___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mmapi.vectorub___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mmapi.vectorub___setitem__(self, *args)

    def append(self, x):
        return _mmapi.vectorub_append(self, x)

    def empty(self):
        return _mmapi.vectorub_empty(self)

    def size(self):
        return _mmapi.vectorub_size(self)

    def clear(self):
        return _mmapi.vectorub_clear(self)

    def swap(self, v):
        return _mmapi.vectorub_swap(self, v)

    def get_allocator(self):
        return _mmapi.vectorub_get_allocator(self)

    def begin(self):
        return _mmapi.vectorub_begin(self)

    def end(self):
        return _mmapi.vectorub_end(self)

    def rbegin(self):
        return _mmapi.vectorub_rbegin(self)

    def rend(self):
        return _mmapi.vectorub_rend(self)

    def pop_back(self):
        return _mmapi.vectorub_pop_back(self)

    def erase(self, *args):
        return _mmapi.vectorub_erase(self, *args)

    def __init__(self, *args):
        this = _mmapi.new_vectorub(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _mmapi.vectorub_push_back(self, x)

    def front(self):
        return _mmapi.vectorub_front(self)

    def back(self):
        return _mmapi.vectorub_back(self)

    def assign(self, n, x):
        return _mmapi.vectorub_assign(self, n, x)

    def resize(self, *args):
        return _mmapi.vectorub_resize(self, *args)

    def insert(self, *args):
        return _mmapi.vectorub_insert(self, *args)

    def reserve(self, n):
        return _mmapi.vectorub_reserve(self, n)

    def capacity(self):
        return _mmapi.vectorub_capacity(self)
    __swig_destroy__ = _mmapi.delete_vectorub
    __del__ = lambda self: None
vectorub_swigregister = _mmapi.vectorub_swigregister
vectorub_swigregister(vectorub)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _mmapi.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mmapi.vectori___nonzero__(self)

    def __bool__(self):
        return _mmapi.vectori___bool__(self)

    def __len__(self):
        return _mmapi.vectori___len__(self)

    def pop(self):
        return _mmapi.vectori_pop(self)

    def __getslice__(self, i, j):
        return _mmapi.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mmapi.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mmapi.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mmapi.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mmapi.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mmapi.vectori___setitem__(self, *args)

    def append(self, x):
        return _mmapi.vectori_append(self, x)

    def empty(self):
        return _mmapi.vectori_empty(self)

    def size(self):
        return _mmapi.vectori_size(self)

    def clear(self):
        return _mmapi.vectori_clear(self)

    def swap(self, v):
        return _mmapi.vectori_swap(self, v)

    def get_allocator(self):
        return _mmapi.vectori_get_allocator(self)

    def begin(self):
        return _mmapi.vectori_begin(self)

    def end(self):
        return _mmapi.vectori_end(self)

    def rbegin(self):
        return _mmapi.vectori_rbegin(self)

    def rend(self):
        return _mmapi.vectori_rend(self)

    def pop_back(self):
        return _mmapi.vectori_pop_back(self)

    def erase(self, *args):
        return _mmapi.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _mmapi.new_vectori(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _mmapi.vectori_push_back(self, x)

    def front(self):
        return _mmapi.vectori_front(self)

    def back(self):
        return _mmapi.vectori_back(self)

    def assign(self, n, x):
        return _mmapi.vectori_assign(self, n, x)

    def resize(self, *args):
        return _mmapi.vectori_resize(self, *args)

    def insert(self, *args):
        return _mmapi.vectori_insert(self, *args)

    def reserve(self, n):
        return _mmapi.vectori_reserve(self, n)

    def capacity(self):
        return _mmapi.vectori_capacity(self)
    __swig_destroy__ = _mmapi.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _mmapi.vectori_swigregister
vectori_swigregister(vectori)

class vectorui(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorui, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorui, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _mmapi.vectorui_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mmapi.vectorui___nonzero__(self)

    def __bool__(self):
        return _mmapi.vectorui___bool__(self)

    def __len__(self):
        return _mmapi.vectorui___len__(self)

    def pop(self):
        return _mmapi.vectorui_pop(self)

    def __getslice__(self, i, j):
        return _mmapi.vectorui___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mmapi.vectorui___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mmapi.vectorui___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mmapi.vectorui___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mmapi.vectorui___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mmapi.vectorui___setitem__(self, *args)

    def append(self, x):
        return _mmapi.vectorui_append(self, x)

    def empty(self):
        return _mmapi.vectorui_empty(self)

    def size(self):
        return _mmapi.vectorui_size(self)

    def clear(self):
        return _mmapi.vectorui_clear(self)

    def swap(self, v):
        return _mmapi.vectorui_swap(self, v)

    def get_allocator(self):
        return _mmapi.vectorui_get_allocator(self)

    def begin(self):
        return _mmapi.vectorui_begin(self)

    def end(self):
        return _mmapi.vectorui_end(self)

    def rbegin(self):
        return _mmapi.vectorui_rbegin(self)

    def rend(self):
        return _mmapi.vectorui_rend(self)

    def pop_back(self):
        return _mmapi.vectorui_pop_back(self)

    def erase(self, *args):
        return _mmapi.vectorui_erase(self, *args)

    def __init__(self, *args):
        this = _mmapi.new_vectorui(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _mmapi.vectorui_push_back(self, x)

    def front(self):
        return _mmapi.vectorui_front(self)

    def back(self):
        return _mmapi.vectorui_back(self)

    def assign(self, n, x):
        return _mmapi.vectorui_assign(self, n, x)

    def resize(self, *args):
        return _mmapi.vectorui_resize(self, *args)

    def insert(self, *args):
        return _mmapi.vectorui_insert(self, *args)

    def reserve(self, n):
        return _mmapi.vectorui_reserve(self, n)

    def capacity(self):
        return _mmapi.vectorui_capacity(self)
    __swig_destroy__ = _mmapi.delete_vectorui
    __del__ = lambda self: None
vectorui_swigregister = _mmapi.vectorui_swigregister
vectorui_swigregister(vectorui)

class vectorf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorf, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _mmapi.vectorf_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mmapi.vectorf___nonzero__(self)

    def __bool__(self):
        return _mmapi.vectorf___bool__(self)

    def __len__(self):
        return _mmapi.vectorf___len__(self)

    def pop(self):
        return _mmapi.vectorf_pop(self)

    def __getslice__(self, i, j):
        return _mmapi.vectorf___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mmapi.vectorf___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mmapi.vectorf___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mmapi.vectorf___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mmapi.vectorf___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mmapi.vectorf___setitem__(self, *args)

    def append(self, x):
        return _mmapi.vectorf_append(self, x)

    def empty(self):
        return _mmapi.vectorf_empty(self)

    def size(self):
        return _mmapi.vectorf_size(self)

    def clear(self):
        return _mmapi.vectorf_clear(self)

    def swap(self, v):
        return _mmapi.vectorf_swap(self, v)

    def get_allocator(self):
        return _mmapi.vectorf_get_allocator(self)

    def begin(self):
        return _mmapi.vectorf_begin(self)

    def end(self):
        return _mmapi.vectorf_end(self)

    def rbegin(self):
        return _mmapi.vectorf_rbegin(self)

    def rend(self):
        return _mmapi.vectorf_rend(self)

    def pop_back(self):
        return _mmapi.vectorf_pop_back(self)

    def erase(self, *args):
        return _mmapi.vectorf_erase(self, *args)

    def __init__(self, *args):
        this = _mmapi.new_vectorf(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _mmapi.vectorf_push_back(self, x)

    def front(self):
        return _mmapi.vectorf_front(self)

    def back(self):
        return _mmapi.vectorf_back(self)

    def assign(self, n, x):
        return _mmapi.vectorf_assign(self, n, x)

    def resize(self, *args):
        return _mmapi.vectorf_resize(self, *args)

    def insert(self, *args):
        return _mmapi.vectorf_insert(self, *args)

    def reserve(self, n):
        return _mmapi.vectorf_reserve(self, n)

    def capacity(self):
        return _mmapi.vectorf_capacity(self)
    __swig_destroy__ = _mmapi.delete_vectorf
    __del__ = lambda self: None
vectorf_swigregister = _mmapi.vectorf_swigregister
vectorf_swigregister(vectorf)

class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _mmapi.new_floatArray(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _mmapi.delete_floatArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _mmapi.floatArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _mmapi.floatArray___setitem__(self, index, value)

    def cast(self):
        return _mmapi.floatArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _mmapi.floatArray_frompointer
    if _newclass:
        frompointer = staticmethod(_mmapi.floatArray_frompointer)
floatArray_swigregister = _mmapi.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(t):
    return _mmapi.floatArray_frompointer(t)
floatArray_frompointer = _mmapi.floatArray_frompointer

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _mmapi.new_intArray(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _mmapi.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _mmapi.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _mmapi.intArray___setitem__(self, index, value)

    def cast(self):
        return _mmapi.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _mmapi.intArray_frompointer
    if _newclass:
        frompointer = staticmethod(_mmapi.intArray_frompointer)
intArray_swigregister = _mmapi.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _mmapi.intArray_frompointer(t)
intArray_frompointer = _mmapi.intArray_frompointer

class BinarySerializer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinarySerializer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinarySerializer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _mmapi.new_BinarySerializer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def reserveTotal(self, nBytes):
        return _mmapi.BinarySerializer_reserveTotal(self, nBytes)

    def reserveAppend(self, nBytes):
        return _mmapi.BinarySerializer_reserveAppend(self, nBytes)

    def append(self, str):
        return _mmapi.BinarySerializer_append(self, str)

    def beginRestore(self):
        return _mmapi.BinarySerializer_beginRestore(self)

    def restore(self, str):
        return _mmapi.BinarySerializer_restore(self, str)

    def test_restore(self, testStr):
        return _mmapi.BinarySerializer_test_restore(self, testStr)

    def restoreBlock(self, nBlockSize):
        return _mmapi.BinarySerializer_restoreBlock(self, nBlockSize)

    def peekBlock(self, arg2):
        return _mmapi.BinarySerializer_peekBlock(self, arg2)

    def buffer(self, *args):
        return _mmapi.BinarySerializer_buffer(self, *args)

    def setBuffer(self, buf):
        return _mmapi.BinarySerializer_setBuffer(self, buf)
    __swig_destroy__ = _mmapi.delete_BinarySerializer
    __del__ = lambda self: None
BinarySerializer_swigregister = _mmapi.BinarySerializer_swigregister
BinarySerializer_swigregister(BinarySerializer)

class vec3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _mmapi.vec3f_x_set
    __swig_getmethods__["x"] = _mmapi.vec3f_x_get
    if _newclass:
        x = _swig_property(_mmapi.vec3f_x_get, _mmapi.vec3f_x_set)
    __swig_setmethods__["y"] = _mmapi.vec3f_y_set
    __swig_getmethods__["y"] = _mmapi.vec3f_y_get
    if _newclass:
        y = _swig_property(_mmapi.vec3f_y_get, _mmapi.vec3f_y_set)
    __swig_setmethods__["z"] = _mmapi.vec3f_z_set
    __swig_getmethods__["z"] = _mmapi.vec3f_z_get
    if _newclass:
        z = _swig_property(_mmapi.vec3f_z_get, _mmapi.vec3f_z_set)

    def __init__(self):
        this = _mmapi.new_vec3f()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _mmapi.delete_vec3f
    __del__ = lambda self: None
vec3f_swigregister = _mmapi.vec3f_swigregister
vec3f_swigregister(vec3f)

class mat3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mat3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mat3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _mmapi.mat3f_data_set
    __swig_getmethods__["data"] = _mmapi.mat3f_data_get
    if _newclass:
        data = _swig_property(_mmapi.mat3f_data_get, _mmapi.mat3f_data_set)

    def __init__(self):
        this = _mmapi.new_mat3f()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _mmapi.delete_mat3f
    __del__ = lambda self: None
mat3f_swigregister = _mmapi.mat3f_swigregister
mat3f_swigregister(mat3f)

class frame3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, frame3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, frame3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["origin_x"] = _mmapi.frame3f_origin_x_set
    __swig_getmethods__["origin_x"] = _mmapi.frame3f_origin_x_get
    if _newclass:
        origin_x = _swig_property(_mmapi.frame3f_origin_x_get, _mmapi.frame3f_origin_x_set)
    __swig_setmethods__["origin_y"] = _mmapi.frame3f_origin_y_set
    __swig_getmethods__["origin_y"] = _mmapi.frame3f_origin_y_get
    if _newclass:
        origin_y = _swig_property(_mmapi.frame3f_origin_y_get, _mmapi.frame3f_origin_y_set)
    __swig_setmethods__["origin_z"] = _mmapi.frame3f_origin_z_set
    __swig_getmethods__["origin_z"] = _mmapi.frame3f_origin_z_get
    if _newclass:
        origin_z = _swig_property(_mmapi.frame3f_origin_z_get, _mmapi.frame3f_origin_z_set)
    __swig_setmethods__["normal_x"] = _mmapi.frame3f_normal_x_set
    __swig_getmethods__["normal_x"] = _mmapi.frame3f_normal_x_get
    if _newclass:
        normal_x = _swig_property(_mmapi.frame3f_normal_x_get, _mmapi.frame3f_normal_x_set)
    __swig_setmethods__["normal_y"] = _mmapi.frame3f_normal_y_set
    __swig_getmethods__["normal_y"] = _mmapi.frame3f_normal_y_get
    if _newclass:
        normal_y = _swig_property(_mmapi.frame3f_normal_y_get, _mmapi.frame3f_normal_y_set)
    __swig_setmethods__["normal_z"] = _mmapi.frame3f_normal_z_set
    __swig_getmethods__["normal_z"] = _mmapi.frame3f_normal_z_get
    if _newclass:
        normal_z = _swig_property(_mmapi.frame3f_normal_z_get, _mmapi.frame3f_normal_z_set)
    __swig_setmethods__["tan1_x"] = _mmapi.frame3f_tan1_x_set
    __swig_getmethods__["tan1_x"] = _mmapi.frame3f_tan1_x_get
    if _newclass:
        tan1_x = _swig_property(_mmapi.frame3f_tan1_x_get, _mmapi.frame3f_tan1_x_set)
    __swig_setmethods__["tan1_y"] = _mmapi.frame3f_tan1_y_set
    __swig_getmethods__["tan1_y"] = _mmapi.frame3f_tan1_y_get
    if _newclass:
        tan1_y = _swig_property(_mmapi.frame3f_tan1_y_get, _mmapi.frame3f_tan1_y_set)
    __swig_setmethods__["tan1_z"] = _mmapi.frame3f_tan1_z_set
    __swig_getmethods__["tan1_z"] = _mmapi.frame3f_tan1_z_get
    if _newclass:
        tan1_z = _swig_property(_mmapi.frame3f_tan1_z_get, _mmapi.frame3f_tan1_z_set)
    __swig_setmethods__["tan2_x"] = _mmapi.frame3f_tan2_x_set
    __swig_getmethods__["tan2_x"] = _mmapi.frame3f_tan2_x_get
    if _newclass:
        tan2_x = _swig_property(_mmapi.frame3f_tan2_x_get, _mmapi.frame3f_tan2_x_set)
    __swig_setmethods__["tan2_y"] = _mmapi.frame3f_tan2_y_set
    __swig_getmethods__["tan2_y"] = _mmapi.frame3f_tan2_y_get
    if _newclass:
        tan2_y = _swig_property(_mmapi.frame3f_tan2_y_get, _mmapi.frame3f_tan2_y_set)
    __swig_setmethods__["tan2_z"] = _mmapi.frame3f_tan2_z_set
    __swig_getmethods__["tan2_z"] = _mmapi.frame3f_tan2_z_get
    if _newclass:
        tan2_z = _swig_property(_mmapi.frame3f_tan2_z_get, _mmapi.frame3f_tan2_z_set)

    def __init__(self):
        this = _mmapi.new_frame3f()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _mmapi.delete_frame3f
    __del__ = lambda self: None
frame3f_swigregister = _mmapi.frame3f_swigregister
frame3f_swigregister(frame3f)

class fstring(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fstring, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fstring, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nSize"] = _mmapi.fstring_nSize_set
    __swig_getmethods__["nSize"] = _mmapi.fstring_nSize_get
    if _newclass:
        nSize = _swig_property(_mmapi.fstring_nSize_get, _mmapi.fstring_nSize_set)
    __swig_setmethods__["data"] = _mmapi.fstring_data_set
    __swig_getmethods__["data"] = _mmapi.fstring_data_get
    if _newclass:
        data = _swig_property(_mmapi.fstring_data_get, _mmapi.fstring_data_set)

    def __init__(self):
        this = _mmapi.new_fstring()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _mmapi.delete_fstring
    __del__ = lambda self: None
fstring_swigregister = _mmapi.fstring_swigregister
fstring_swigregister(fstring)

class brush_stamp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, brush_stamp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, brush_stamp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _mmapi.brush_stamp_x_set
    __swig_getmethods__["x"] = _mmapi.brush_stamp_x_get
    if _newclass:
        x = _swig_property(_mmapi.brush_stamp_x_get, _mmapi.brush_stamp_x_set)
    __swig_setmethods__["y"] = _mmapi.brush_stamp_y_set
    __swig_getmethods__["y"] = _mmapi.brush_stamp_y_get
    if _newclass:
        y = _swig_property(_mmapi.brush_stamp_y_get, _mmapi.brush_stamp_y_set)
    __swig_setmethods__["z"] = _mmapi.brush_stamp_z_set
    __swig_getmethods__["z"] = _mmapi.brush_stamp_z_get
    if _newclass:
        z = _swig_property(_mmapi.brush_stamp_z_get, _mmapi.brush_stamp_z_set)
    __swig_setmethods__["fPressure"] = _mmapi.brush_stamp_fPressure_set
    __swig_getmethods__["fPressure"] = _mmapi.brush_stamp_fPressure_get
    if _newclass:
        fPressure = _swig_property(_mmapi.brush_stamp_fPressure_get, _mmapi.brush_stamp_fPressure_set)

    def __init__(self):
        this = _mmapi.new_brush_stamp()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _mmapi.delete_brush_stamp
    __del__ = lambda self: None
brush_stamp_swigregister = _mmapi.brush_stamp_swigregister
brush_stamp_swigregister(brush_stamp)

class any_result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, any_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, any_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mmapi.any_result_type_set
    __swig_getmethods__["type"] = _mmapi.any_result_type_get
    if _newclass:
        type = _swig_property(_mmapi.any_result_type_get, _mmapi.any_result_type_set)
    __swig_setmethods__["f"] = _mmapi.any_result_f_set
    __swig_getmethods__["f"] = _mmapi.any_result_f_get
    if _newclass:
        f = _swig_property(_mmapi.any_result_f_get, _mmapi.any_result_f_set)
    __swig_setmethods__["i"] = _mmapi.any_result_i_set
    __swig_getmethods__["i"] = _mmapi.any_result_i_get
    if _newclass:
        i = _swig_property(_mmapi.any_result_i_get, _mmapi.any_result_i_set)
    __swig_setmethods__["b"] = _mmapi.any_result_b_set
    __swig_getmethods__["b"] = _mmapi.any_result_b_get
    if _newclass:
        b = _swig_property(_mmapi.any_result_b_get, _mmapi.any_result_b_set)
    __swig_setmethods__["x"] = _mmapi.any_result_x_set
    __swig_getmethods__["x"] = _mmapi.any_result_x_get
    if _newclass:
        x = _swig_property(_mmapi.any_result_x_get, _mmapi.any_result_x_set)
    __swig_setmethods__["y"] = _mmapi.any_result_y_set
    __swig_getmethods__["y"] = _mmapi.any_result_y_get
    if _newclass:
        y = _swig_property(_mmapi.any_result_y_get, _mmapi.any_result_y_set)
    __swig_setmethods__["z"] = _mmapi.any_result_z_set
    __swig_getmethods__["z"] = _mmapi.any_result_z_get
    if _newclass:
        z = _swig_property(_mmapi.any_result_z_get, _mmapi.any_result_z_set)
    __swig_setmethods__["m"] = _mmapi.any_result_m_set
    __swig_getmethods__["m"] = _mmapi.any_result_m_get
    if _newclass:
        m = _swig_property(_mmapi.any_result_m_get, _mmapi.any_result_m_set)

    def __init__(self):
        this = _mmapi.new_any_result()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _mmapi.delete_any_result
    __del__ = lambda self: None
any_result_swigregister = _mmapi.any_result_swigregister
any_result_swigregister(any_result)

class camera_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, camera_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, camera_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["horzFOVDegrees"] = _mmapi.camera_info_horzFOVDegrees_set
    __swig_getmethods__["horzFOVDegrees"] = _mmapi.camera_info_horzFOVDegrees_get
    if _newclass:
        horzFOVDegrees = _swig_property(_mmapi.camera_info_horzFOVDegrees_get, _mmapi.camera_info_horzFOVDegrees_set)
    __swig_setmethods__["width"] = _mmapi.camera_info_width_set
    __swig_getmethods__["width"] = _mmapi.camera_info_width_get
    if _newclass:
        width = _swig_property(_mmapi.camera_info_width_get, _mmapi.camera_info_width_set)
    __swig_setmethods__["height"] = _mmapi.camera_info_height_set
    __swig_getmethods__["height"] = _mmapi.camera_info_height_get
    if _newclass:
        height = _swig_property(_mmapi.camera_info_height_get, _mmapi.camera_info_height_set)

    def __init__(self):
        this = _mmapi.new_camera_info()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _mmapi.delete_camera_info
    __del__ = lambda self: None
camera_info_swigregister = _mmapi.camera_info_swigregister
camera_info_swigregister(camera_info)

class StoredCommands(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StoredCommands, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StoredCommands, name)
    __repr__ = _swig_repr

    def AppendMouseDownEvent(self, bLeftDown, bMiddleDown, bRightDown, x, y, bAbsolute=True):
        return _mmapi.StoredCommands_AppendMouseDownEvent(self, bLeftDown, bMiddleDown, bRightDown, x, y, bAbsolute)

    def AppendMouseMoveEvent(self, x, y, bAbsolute):
        return _mmapi.StoredCommands_AppendMouseMoveEvent(self, x, y, bAbsolute)

    def AppendMouseUpEvent(self, bLeftUp, bMiddleUp, bRightUp, x, y, bAbsolute):
        return _mmapi.StoredCommands_AppendMouseUpEvent(self, bLeftUp, bMiddleUp, bRightUp, x, y, bAbsolute)

    def CameraControl_Begin(self):
        return _mmapi.StoredCommands_CameraControl_Begin(self)

    def CameraControl_End(self):
        return _mmapi.StoredCommands_CameraControl_End(self)

    def CameraControl_EnableOrbitSnap(self):
        return _mmapi.StoredCommands_CameraControl_EnableOrbitSnap(self)

    def CameraControl_DisableOrbitSnap(self):
        return _mmapi.StoredCommands_CameraControl_DisableOrbitSnap(self)

    def CameraControl_FreeOrbit(self, fAngleDegreesX, fAngleDegreesY):
        return _mmapi.StoredCommands_CameraControl_FreeOrbit(self, fAngleDegreesX, fAngleDegreesY)

    def CameraControl_TurntableOrbit(self, fAngleDegreesX, fAngleDegreesY):
        return _mmapi.StoredCommands_CameraControl_TurntableOrbit(self, fAngleDegreesX, fAngleDegreesY)

    def CameraControl_Pan(self, fDistanceX, fDistanceY):
        return _mmapi.StoredCommands_CameraControl_Pan(self, fDistanceX, fDistanceY)

    def CameraControl_DollyZoom(self, fDistanceZ):
        return _mmapi.StoredCommands_CameraControl_DollyZoom(self, fDistanceZ)

    def CameraControl_RecenterView(self):
        return _mmapi.StoredCommands_CameraControl_RecenterView(self)

    def CameraControl_RecenterViewAtCursor(self):
        return _mmapi.StoredCommands_CameraControl_RecenterViewAtCursor(self)

    def CameraControl_SetSpecificView(self, eye, target, up):
        return _mmapi.StoredCommands_CameraControl_SetSpecificView(self, eye, target, up)

    def CameraControl_SetOrthographicView(self):
        return _mmapi.StoredCommands_CameraControl_SetOrthographicView(self)

    def CameraControl_SetPerspectiveView(self):
        return _mmapi.StoredCommands_CameraControl_SetPerspectiveView(self)

    def CameraControl_QueryCamera(self):
        return _mmapi.StoredCommands_CameraControl_QueryCamera(self)

    def CameraControl_QueryCameraResult(self, k, f, target, cam_info):
        return _mmapi.StoredCommands_CameraControl_QueryCameraResult(self, k, f, target, cam_info)

    def CameraControl_QueryEyeRayAtPixel(self, x, y):
        return _mmapi.StoredCommands_CameraControl_QueryEyeRayAtPixel(self, x, y)

    def CameraControl_QueryEyeRayAtPixelResult(self, k, ray_origin, ray_direction):
        return _mmapi.StoredCommands_CameraControl_QueryEyeRayAtPixelResult(self, k, ray_origin, ray_direction)

    def ViewControl_SetSurfaceNormalMode(self, nMode):
        return _mmapi.StoredCommands_ViewControl_SetSurfaceNormalMode(self, nMode)

    def ViewControl_SetTriangleColorMode(self, nMode):
        return _mmapi.StoredCommands_ViewControl_SetTriangleColorMode(self, nMode)

    def ViewControl_SetShowWireframe(self, bShow):
        return _mmapi.StoredCommands_ViewControl_SetShowWireframe(self, bShow)

    def ViewControl_SetShowBoundaries(self, bShow):
        return _mmapi.StoredCommands_ViewControl_SetShowBoundaries(self, bShow)

    def ViewControl_SetShowGrid(self, bShow):
        return _mmapi.StoredCommands_ViewControl_SetShowGrid(self, bShow)

    def ViewControl_SetShowPrinterBed(self, bShow):
        return _mmapi.StoredCommands_ViewControl_SetShowPrinterBed(self, bShow)

    def ViewControl_SetTransparentTarget(self, bEnable):
        return _mmapi.StoredCommands_ViewControl_SetTransparentTarget(self, bEnable)

    def ViewControl_SetDefaultShader(self):
        return _mmapi.StoredCommands_ViewControl_SetDefaultShader(self)

    def ViewControl_SetXRayShader(self):
        return _mmapi.StoredCommands_ViewControl_SetXRayShader(self)

    def ViewControl_SetTextureShader(self):
        return _mmapi.StoredCommands_ViewControl_SetTextureShader(self)

    def ViewControl_SetUVShader(self):
        return _mmapi.StoredCommands_ViewControl_SetUVShader(self)

    def ViewControl_SetOverhangShader(self):
        return _mmapi.StoredCommands_ViewControl_SetOverhangShader(self)

    def ViewControl_ShowObjectBrowser(self):
        return _mmapi.StoredCommands_ViewControl_ShowObjectBrowser(self)

    def ViewControl_HideObjectBrowser(self):
        return _mmapi.StoredCommands_ViewControl_HideObjectBrowser(self)

    def AppendBeginToolCommand(self, toolName):
        return _mmapi.StoredCommands_AppendBeginToolCommand(self, toolName)

    def AppendCompleteToolCommand(self, command):
        return _mmapi.StoredCommands_AppendCompleteToolCommand(self, command)

    def AppendToolParameterCommand(self, *args):
        return _mmapi.StoredCommands_AppendToolParameterCommand(self, *args)

    def AppendGetToolParameterCommand(self, paramName):
        return _mmapi.StoredCommands_AppendGetToolParameterCommand(self, paramName)

    def GetToolParameterCommandResult(self, *args):
        return _mmapi.StoredCommands_GetToolParameterCommandResult(self, *args)

    def AppendToolQuery_NewGroups(self):
        return _mmapi.StoredCommands_AppendToolQuery_NewGroups(self)

    def GetToolQueryResult_NewGroups(self, k, vObjects):
        return _mmapi.StoredCommands_GetToolQueryResult_NewGroups(self, k, vObjects)

    def AppendToolUtilityCommand(self, *args):
        return _mmapi.StoredCommands_AppendToolUtilityCommand(self, *args)

    def GetSceneCommandResult_IsOK(self, k):
        return _mmapi.StoredCommands_GetSceneCommandResult_IsOK(self, k)

    def AppendSceneCommand_SaveScreenShot(self, pFilename):
        return _mmapi.StoredCommands_AppendSceneCommand_SaveScreenShot(self, pFilename)

    def AppendSceneCommand_OpenMixFile(self, pFilename):
        return _mmapi.StoredCommands_AppendSceneCommand_OpenMixFile(self, pFilename)

    def AppendSceneCommand_ExportMixFile(self, pFilename):
        return _mmapi.StoredCommands_AppendSceneCommand_ExportMixFile(self, pFilename)

    def AppendSceneCommand_AppendMeshFile(self, pFilename):
        return _mmapi.StoredCommands_AppendSceneCommand_AppendMeshFile(self, pFilename)

    def GetSceneCommandResult_AppendMeshFile(self, k, vObjects):
        return _mmapi.StoredCommands_GetSceneCommandResult_AppendMeshFile(self, k, vObjects)

    def AppendSceneCommand_AppendMeshFileAsReference(self, pFilename):
        return _mmapi.StoredCommands_AppendSceneCommand_AppendMeshFileAsReference(self, pFilename)

    def GetSceneCommandResult_AppendMeshFileAsReference(self, k, vObjects):
        return _mmapi.StoredCommands_GetSceneCommandResult_AppendMeshFileAsReference(self, k, vObjects)

    def AppendSceneCommand_ExportMeshFile_CurrentSelection(self, pFilename):
        return _mmapi.StoredCommands_AppendSceneCommand_ExportMeshFile_CurrentSelection(self, pFilename)

    def AppendSceneCommand_CreatePivot(self, f):
        return _mmapi.StoredCommands_AppendSceneCommand_CreatePivot(self, f)

    def GetSceneCommandResult_CreatePivot(self, k, nObjectID):
        return _mmapi.StoredCommands_GetSceneCommandResult_CreatePivot(self, k, nObjectID)

    def AppendSceneCommand_LinkPivot(self, nPivotID, nLinkToID):
        return _mmapi.StoredCommands_AppendSceneCommand_LinkPivot(self, nPivotID, nLinkToID)

    def AppendSceneCommand_UnlinkPivot(self, nPivotID):
        return _mmapi.StoredCommands_AppendSceneCommand_UnlinkPivot(self, nPivotID)

    def AppendSceneCommand_Clear(self):
        return _mmapi.StoredCommands_AppendSceneCommand_Clear(self)

    def AppendSceneCommand_ListObjects(self):
        return _mmapi.StoredCommands_AppendSceneCommand_ListObjects(self)

    def GetSceneCommandResult_ListObjects(self, k, vObjects):
        return _mmapi.StoredCommands_GetSceneCommandResult_ListObjects(self, k, vObjects)

    def AppendSceneCommand_ListSelectedObjects(self):
        return _mmapi.StoredCommands_AppendSceneCommand_ListSelectedObjects(self)

    def GetSceneCommandResult_ListSelectedObjects(self, k, vObjects):
        return _mmapi.StoredCommands_GetSceneCommandResult_ListSelectedObjects(self, k, vObjects)

    def AppendSceneCommand_SelectObjects(self, vObjects):
        return _mmapi.StoredCommands_AppendSceneCommand_SelectObjects(self, vObjects)

    def GetSceneCommandResult_SelectObjects(self, k, vObjects):
        return _mmapi.StoredCommands_GetSceneCommandResult_SelectObjects(self, k, vObjects)

    def AppendSceneCommand_DeleteSelectedObjects(self):
        return _mmapi.StoredCommands_AppendSceneCommand_DeleteSelectedObjects(self)

    def AppendSceneCommand_SetAsTarget(self):
        return _mmapi.StoredCommands_AppendSceneCommand_SetAsTarget(self)

    def AppendSceneCommand_ClearTarget(self):
        return _mmapi.StoredCommands_AppendSceneCommand_ClearTarget(self)

    def AppendSceneCommand_GetObjectName(self, nObjectID):
        return _mmapi.StoredCommands_AppendSceneCommand_GetObjectName(self, nObjectID)

    def GetSceneCommandResult_GetObjectName(self, *args):
        return _mmapi.StoredCommands_GetSceneCommandResult_GetObjectName(self, *args)

    def AppendSceneCommand_SetObjectName(self, nObjectID, objectName):
        return _mmapi.StoredCommands_AppendSceneCommand_SetObjectName(self, nObjectID, objectName)

    def AppendSceneCommand_FindObjectByName(self, objectName):
        return _mmapi.StoredCommands_AppendSceneCommand_FindObjectByName(self, objectName)

    def GetSceneCommandResult_FindObjectByName(self, *args):
        return _mmapi.StoredCommands_GetSceneCommandResult_FindObjectByName(self, *args)

    def AppendSceneCommand_SetVisible(self, nObjectID):
        return _mmapi.StoredCommands_AppendSceneCommand_SetVisible(self, nObjectID)

    def AppendSceneCommand_SetHidden(self, nObjectID):
        return _mmapi.StoredCommands_AppendSceneCommand_SetHidden(self, nObjectID)

    def AppendSceneCommand_ShowAll(self):
        return _mmapi.StoredCommands_AppendSceneCommand_ShowAll(self)

    def AppendQueryCommand_ConvertScalarToWorld(self, f):
        return _mmapi.StoredCommands_AppendQueryCommand_ConvertScalarToWorld(self, f)

    def GetQueryResult_ConvertScalarToWorld(self, k, pResult):
        return _mmapi.StoredCommands_GetQueryResult_ConvertScalarToWorld(self, k, pResult)

    def AppendQueryCommand_ConvertScalarToScene(self, f):
        return _mmapi.StoredCommands_AppendQueryCommand_ConvertScalarToScene(self, f)

    def GetQueryResult_ConvertScalarToScene(self, k, pResult):
        return _mmapi.StoredCommands_GetQueryResult_ConvertScalarToScene(self, k, pResult)

    def AppendQueryCommand_ConvertPointToWorld(self, fPoint):
        return _mmapi.StoredCommands_AppendQueryCommand_ConvertPointToWorld(self, fPoint)

    def GetQueryResult_ConvertPointToWorld(self, k, pResult):
        return _mmapi.StoredCommands_GetQueryResult_ConvertPointToWorld(self, k, pResult)

    def AppendQueryCommand_ConvertPointToScene(self, fPoint):
        return _mmapi.StoredCommands_AppendQueryCommand_ConvertPointToScene(self, fPoint)

    def GetQueryResult_ConvertPointToScene(self, k, pResult):
        return _mmapi.StoredCommands_GetQueryResult_ConvertPointToScene(self, k, pResult)

    def AppendQueryCommand_GetBoundingBox(self):
        return _mmapi.StoredCommands_AppendQueryCommand_GetBoundingBox(self)

    def GetQueryResult_GetBoundingBox(self, k, fMin, fMax):
        return _mmapi.StoredCommands_GetQueryResult_GetBoundingBox(self, k, fMin, fMax)

    def AppendQueryCommand_GetObjectBoundingBox(self, nObjectID):
        return _mmapi.StoredCommands_AppendQueryCommand_GetObjectBoundingBox(self, nObjectID)

    def GetQueryResult_GetObjectBoundingBox(self, k, fMin, fMax):
        return _mmapi.StoredCommands_GetQueryResult_GetObjectBoundingBox(self, k, fMin, fMax)

    def AppendQueryCommand_GetObjectLocalFrame(self, nObjectID):
        return _mmapi.StoredCommands_AppendQueryCommand_GetObjectLocalFrame(self, nObjectID)

    def GetQueryResult_GetObjectLocalFrame(self, k, pFrame):
        return _mmapi.StoredCommands_GetQueryResult_GetObjectLocalFrame(self, k, pFrame)

    def AppendQueryCommand_GetSelectedFacesBoundingBox(self):
        return _mmapi.StoredCommands_AppendQueryCommand_GetSelectedFacesBoundingBox(self)

    def GetQueryResult_GetSelectedFacesBoundingBox(self, k, fMin, fMax):
        return _mmapi.StoredCommands_GetQueryResult_GetSelectedFacesBoundingBox(self, k, fMin, fMax)

    def AppendQueryCommand_GetSelectedFacesCentroid(self):
        return _mmapi.StoredCommands_AppendQueryCommand_GetSelectedFacesCentroid(self)

    def GetQueryResult_GetSelectedFacesCentroid(self, k, fCentroid):
        return _mmapi.StoredCommands_GetQueryResult_GetSelectedFacesCentroid(self, k, fCentroid)

    def AppendQueryCommand_FindRayIntersection(self, *args):
        return _mmapi.StoredCommands_AppendQueryCommand_FindRayIntersection(self, *args)

    def GetQueryResult_FindRayIntersection(self, k, pFrame):
        return _mmapi.StoredCommands_GetQueryResult_FindRayIntersection(self, k, pFrame)

    def AppendQueryCommand_FindNearestPoint(self, *args):
        return _mmapi.StoredCommands_AppendQueryCommand_FindNearestPoint(self, *args)

    def GetQueryResult_FindNearestPoint(self, k, pFrame):
        return _mmapi.StoredCommands_GetQueryResult_FindNearestPoint(self, k, pFrame)

    def AppendSelectCommand_All(self):
        return _mmapi.StoredCommands_AppendSelectCommand_All(self)

    def AppendSelectUtilityCommand(self, *args):
        return _mmapi.StoredCommands_AppendSelectUtilityCommand(self, *args)

    def AppendSelectCommand_NearestComponent(self, cx, cy, cz):
        return _mmapi.StoredCommands_AppendSelectCommand_NearestComponent(self, cx, cy, cz)

    def AppendSelectCommand_ContainingComponent(self, cx, cy, cz):
        return _mmapi.StoredCommands_AppendSelectCommand_ContainingComponent(self, cx, cy, cz)

    def AppendSelectCommand_FirstComponentIntersectingRay(self, ox, oy, oz, dx, dy, dz):
        return _mmapi.StoredCommands_AppendSelectCommand_FirstComponentIntersectingRay(self, ox, oy, oz, dx, dy, dz)

    def AppendSelectCommand_AllComponentsIntersectingRay(self, ox, oy, oz, dx, dy, dz):
        return _mmapi.StoredCommands_AppendSelectCommand_AllComponentsIntersectingRay(self, ox, oy, oz, dx, dy, dz)

    def AppendSelectCommand_NearestTriangle(self, cx, cy, cz):
        return _mmapi.StoredCommands_AppendSelectCommand_NearestTriangle(self, cx, cy, cz)

    def AppendSelectCommand_FirstTriangleIntersectingRay(self, ox, oy, oz, dx, dy, dz):
        return _mmapi.StoredCommands_AppendSelectCommand_FirstTriangleIntersectingRay(self, ox, oy, oz, dx, dy, dz)

    def AppendSelectCommand_AllTrianglesIntersectingRay(self, ox, oy, oz, dx, dy, dz):
        return _mmapi.StoredCommands_AppendSelectCommand_AllTrianglesIntersectingRay(self, ox, oy, oz, dx, dy, dz)

    def AppendSelectCommand_InsideSphere(self, cx, cy, cz, r):
        return _mmapi.StoredCommands_AppendSelectCommand_InsideSphere(self, cx, cy, cz, r)

    def GetSelectCommandResult_InsideSphere(self, k):
        return _mmapi.StoredCommands_GetSelectCommandResult_InsideSphere(self, k)

    def AppendSelectCommand_ByFaceGroups(self, vGroupIDs):
        return _mmapi.StoredCommands_AppendSelectCommand_ByFaceGroups(self, vGroupIDs)

    def GetSelectCommandResult_ByFaceGroups(self, k):
        return _mmapi.StoredCommands_GetSelectCommandResult_ByFaceGroups(self, k)

    def AppendSelectCommand_ListSelectedFaceGroups(self):
        return _mmapi.StoredCommands_AppendSelectCommand_ListSelectedFaceGroups(self)

    def GetSelectCommandResult_ListSelectedFaceGroups(self, k, vGroupIDs):
        return _mmapi.StoredCommands_GetSelectCommandResult_ListSelectedFaceGroups(self, k, vGroupIDs)

    def AppendActionCommand_BrushStroke3D(self, vPoints):
        return _mmapi.StoredCommands_AppendActionCommand_BrushStroke3D(self, vPoints)

    def AppendActionCommand_DropPartAtPoint(self, pPartPath, f, fRadius, bInteractive=False):
        return _mmapi.StoredCommands_AppendActionCommand_DropPartAtPoint(self, pPartPath, f, fRadius, bInteractive)

    def AppendActionCommand_UpdateDropPart(self, f, fRadius, bMinimizeRotation):
        return _mmapi.StoredCommands_AppendActionCommand_UpdateDropPart(self, f, fRadius, bMinimizeRotation)

    def AppendActionCommand_AcceptDropPart(self):
        return _mmapi.StoredCommands_AppendActionCommand_AcceptDropPart(self)

    def GetActionCommandResult_DropPart(self, k, vNewGroups):
        return _mmapi.StoredCommands_GetActionCommandResult_DropPart(self, k, vNewGroups)

    def AppendActionCommand_InsertPolygon(self, x, y, z, fRadius):
        return _mmapi.StoredCommands_AppendActionCommand_InsertPolygon(self, x, y, z, fRadius)

    def GetActionCommandResult_InsertPolygon(self, k, nNewGroupID):
        return _mmapi.StoredCommands_GetActionCommandResult_InsertPolygon(self, k, nNewGroupID)

    def Store(self, s):
        return _mmapi.StoredCommands_Store(self, s)

    def Restore(self, *args):
        return _mmapi.StoredCommands_Restore(self, *args)

    def Execute(self, pMainWin):
        return _mmapi.StoredCommands_Execute(self, pMainWin)

    def Store_Results(self, s):
        return _mmapi.StoredCommands_Store_Results(self, s)

    def Restore_Results(self, *args):
        return _mmapi.StoredCommands_Restore_Results(self, *args)

    def Store_Internal(self):
        return _mmapi.StoredCommands_Store_Internal(self)

    def Store_GetSize(self):
        return _mmapi.StoredCommands_Store_GetSize(self)

    def Store_GetBuffer(self, pBytes, nSize):
        return _mmapi.StoredCommands_Store_GetBuffer(self, pBytes, nSize)

    def __init__(self):
        this = _mmapi.new_StoredCommands()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _mmapi.delete_StoredCommands
    __del__ = lambda self: None
StoredCommands_swigregister = _mmapi.StoredCommands_swigregister
StoredCommands_swigregister(StoredCommands)

# This file is compatible with both classic and new-style classes.


